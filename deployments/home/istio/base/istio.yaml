apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: istio-operator
  namespace: istio-system
spec:
  interval: 1m
  chart:
    spec:
      chart: istio-operator
      version: "1.13.3"
      sourceRef:
        kind: HelmRepository
        name: istio
        namespace: flux-system
  values:
    hub: docker.io/istio
    tag: "1.13.3"
    operator:
      profile: default  # You can choose a different profile based on your needs: default, demo, minimal, etc.

---

apiVersion: v1
kind: Namespace
metadata:
  name: istio-system


---

# Sample Tracing implementaion with jager
# apiVersion: helm.toolkit.fluxcd.io/v2beta1
# kind: HelmRelease
# metadata:
#   name: istio-base
#   namespace: istio-system
# spec:
#   values:
#     pilot:
#       traceSampling: 1.0
#     global:
#       tracer:
#         zipkin:
#           address: jaeger-collector.monitoring:9411


---

# If we enable that, we will enforce SSL handshake on every
# connection that goes through envoy/istio-proxy
# TODO: Look into that
# apiVersion: security.istio.io/v1beta1
# kind: PeerAuthentication
# metadata:
#   name: default
#   namespace: istio-system
# spec:
#   mtls:
#     mode: STRICT

---

# advanced traffic routing rules such as canaries, blue-green deployments, or traffic mirroring
# apiVersion: networking.istio.io/v1beta1
# kind: Gateway
# metadata:
#   name: <gateway-service-name>
#   namespace: <gateway-namespace-name>
# spec:
#   selector:
#     istio: ingressgateway  # use Istio's default?
#   servers:
#   - port:
#       number: 80
#       name: http
#       protocol: HTTP
#     hosts:
#     - "thewatergategroups.com"
#   - port:
#       number: 443
#       name: https
#       protocol: HTTPs
#     hosts:
#     - "thewatergategroups.com"

----

# Implement retries, circuit breakers, and timeouts to improve the resiliency of your service communications.
# apiVersion: networking.istio.io/v1beta1
# kind: VirtualService
# metadata:
#   name: <vs-service-name>
#   namespace: <vs-namespace-name>
# spec:
#   hosts:
#   - <service-name>
#   http:
#   - route:
#     - destination:
#         host: <service-name>
#     retries:
#       attempts: 3
#       perTryTimeout: 2s
#       retryOn: 5xx,connect-failure,refused-stream
